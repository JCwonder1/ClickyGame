{"version":3,"sources":["components/NavContainer.js","components/Jumbotron.js","components/Col.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","click","count","score","Jumbotron","Col","_ref","fluid","children","Cards","divclass","src","image","data-index","data","alt","id","onClick","handleIncrement","App","state","char","Char","imageClass","e","preventDefault","allChar","_this","target","dataset","index","isClicked","setState","forEach","element","shuffleArray","alert","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","_this2","NavContainer","components_Jumbotron","map","components_Col","components_Cards","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAceA,MAZf,SAAaC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2CACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,eAGAJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,IAAIJ,EAAMM,OACxBL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,UAAoCJ,EAAMO,MAA1C,mBAAiEP,EAAMQ,SCK9DC,MAZf,SAAmBT,GACjB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,uBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,kECGUM,MARjB,SAAAC,GAAgCA,EAAlBC,MAAkB,IAAXC,EAAWF,EAAXE,SACjB,OACCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZS,ICeOC,MAlBf,SAAed,GAGX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAW,YAAcJ,EAAMe,SAC/BC,IAAKhB,EAAMiB,MACXC,aAAYlB,EAAMmB,KAClBC,IAAI,GACJC,GAAIrB,EAAMqB,GACVC,QAAStB,EAAMuB,oBCmGVC,oNAvGbC,MAAQ,CACNnB,MAAO,qBACPC,MAAO,EACPC,MAAO,EACPkB,KAAMC,EACNC,WAAY,MAQdL,gBAAkB,SAAAM,GAChBA,EAAEC,iBAEF,IAAMC,EAAUC,EAAKP,MAAMC,KAEtBK,EAAQF,EAAEI,OAAOC,QAAQC,OAAOC,WASnCJ,EAAKK,SAAS,CAACT,WAAY,UAC3BI,EAAKK,SAAS,CACZ7B,MACEwB,EAAKP,MAAMjB,MAAQwB,EAAKP,MAAMlB,MAC1ByB,EAAKP,MAAMlB,MACXyB,EAAKP,MAAMjB,QAInBwB,EAAKK,SAAS,CAAE9B,MAAO,EAAGD,MAAO,eAGjCyB,EAAQO,QAAQ,SAAAC,GACdA,EAAQH,WAAY,MArBtBL,EAAQF,EAAEI,OAAOC,QAAQC,OAAOC,WAAY,EAE5CJ,EAAKK,SAAS,CAAEX,KAAMK,IACtBC,EAAKK,SAAS,CAAE9B,MAAOyB,EAAKP,MAAMlB,MAAQ,EAAGD,MAAO,aACpD0B,EAAKQ,aAAaR,EAAKP,MAAMC,OAsB3BM,EAAKP,MAAMlB,OAAS,KACtByB,EAAKK,SAAS,CAAE9B,MAAO,EAAGC,MAAO,KAEjCiC,MAAM,cACNV,EAAQO,QAAQ,SAAAC,GACdA,EAAQH,WAAY,QAK1BI,aAAe,SAAAE,GAMb,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvBX,EAAKK,SAAS,CAAEX,KAAMgB,EAAOd,WAAY,0FA/DzCsB,KAAKV,aAAaU,KAAKzB,MAAMC,uCAkEtB,IAAAyB,EAAAD,KACP,OACEjD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiD,EAAD,CACE9C,MAAO4C,KAAKzB,MAAMnB,MAClBC,MAAO2C,KAAKzB,MAAMlB,MAClBC,MAAO0C,KAAKzB,MAAMjB,QAEpBP,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZ8C,KAAKzB,MAAMC,KAAK4B,IAAI,SAAC5B,EAAMS,GAAP,OACnBlC,EAAAC,EAAAC,cAACoD,EAAD,KACEtD,EAAAC,EAAAC,cAACqD,EAAD,CACEC,IAAKtB,EACLhB,KAAMgB,EACNlB,MAAOS,EAAKT,MACZI,GAAIK,EAAKL,GACTN,SAAUoC,EAAK1B,MAAMG,WACrBL,gBAAiB4B,EAAK5B,8BA9FpBmC,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.51d248d5.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar navbar-dark fixed-top bg-primary\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Clicky Game\n      </a>\n      <h2 className=\"\">{props.click}</h2>\n      <p className=\"navbar-brand\">Score: {props.count}  |  Top Score: {props.score}</p>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\nfunction Jumbotron(props) {\n  return (\n   <div className=\"jumbotron jumbotron-fluid\">\n     <div className=\"container\">\n       <div className=\"display-4\">Minions Memory Game</div>\n       <div className=\"lead\">Click a Minion but dont click the same Minion twice.</div>\n     </div>\n\n   </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\n\nfunction Col({fluid, children}) {\n    return (\n     <div className=\"flex-items-default\">\n       {children}\n     </div>\n    );\n  }\n  \n  export default Col;","import React from \"react\";\n\nfunction Cards(props){\n    \n    \n    return (\n      <div className=\"card click-item\">\n        <img\n          className={\"card-img \" + props.divclass}\n          src={props.image}\n          data-index={props.data}\n          alt=\"\"\n          id={props.id}\n          onClick={props.handleIncrement}\n        />\n      </div>\n    );\n\n}\n\nexport default Cards;","import React from \"react\";\nimport Nav from \"./components/NavContainer\";\nimport Jumbo from \"./components/Jumbotron\";\nimport Char from \"./components/characters.json\";\nimport Col from \"./components/Col\";\nimport Cards from \"./components/Cards\";\nimport { all } from \"q\";\n\nclass App extends React.Component {\n  state = {\n    click: \"Click on an Image!\",\n    count: 0,\n    score: 0,\n    char: Char,\n    imageClass: \"\"\n  };\n\n  componentWillMount() {\n    this.shuffleArray(this.state.char);\n    \n  }\n\n  handleIncrement = e => {\n    e.preventDefault();\n\n    const allChar = this.state.char;\n\n    if (!allChar[e.target.dataset.index].isClicked) {\n      allChar[e.target.dataset.index].isClicked = true;\n\n      this.setState({ char: allChar });\n      this.setState({ count: this.state.count + 1, click: \"Good Job\" });\n      this.shuffleArray(this.state.char);\n    } else {\n      //Set Top Score\n\n      this.setState({imageClass: \"shake\"})\n      this.setState({\n        score:\n          this.state.score < this.state.count\n            ? this.state.count\n            : this.state.score\n      });\n\n      //Reset Count and Change Play text\n      this.setState({ count: 0, click: \"TRY AGAIN!\" });\n\n      //Reset click tracking to false\n      allChar.forEach(element => {\n        element.isClicked = false;\n      });\n      \n    }\n    //Alert Play if they Won\n    if (this.state.count >= 11) {\n      this.setState({ count: 0, score: 12 });\n\n      alert(\"You Won!!!\");\n      allChar.forEach(element => {\n        element.isClicked = false;\n      });\n    }\n  };\n\n  shuffleArray = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({ char: array, imageClass: \"\"});\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav\n          click={this.state.click}\n          count={this.state.count}\n          score={this.state.score}\n        />\n        <Jumbo />\n        <div className=\"container flex\">\n          {this.state.char.map((char, index) => (\n            <Col>\n              <Cards\n                key={index}\n                data={index}\n                image={char.image}\n                id={char.id}\n                divclass={this.state.imageClass}\n                handleIncrement={this.handleIncrement}\n              />\n            </Col>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}